const { cmd } = require("../command");
const ytdl = require("ytdl-core"); // YouTube ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è
const yts = require("yt-search"); // YouTube ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è
const fs = require("fs"); // ‡∂ú‡∑ú‡∂±‡∑î ‡∂ö‡∑Ö‡∂∏‡∂±‡∑è‡∂ö‡∂ª‡∂´‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è

// YouTube ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
cmd({
  pattern: "ytt",
  react: 'üé•',
  desc: "Download YouTube video by searching for keywords.",
  category: "main",
  use: ".video <video name or keywords>",
  filename: __filename
}, async (conn, mek, msg, { from, args, reply }) => {
  try {
    const searchQuery = args.join(" ");
    if (!searchQuery) {
      return reply(`‚ùóÔ∏è ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑Ä‡∂†‡∂± ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±. üìù
      Example: .video Mal mitak`);
    }

    // ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    reply("*üîç Searching for the video... üé•*");

    // YouTube ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const searchResults = await yts(searchQuery);
    if (!searchResults.videos || searchResults.videos.length === 0) {
      return reply(`‚ùå No results found for "${searchQuery}". üòî`);
    }

    const videoDetails = searchResults.videos[0];
    const { title, timestamp, views, author, url: videoUrl, image } = videoDetails;

    // ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∂∏‡∂ü ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫
    let ytmsg = `üé• *ùñµùñ®ùñ£ùñ§ùñÆ ùñ£ùñÆùñ∂ùñ≠ùñ´ùñÆùñ†ùñ£ùñ§ùñ±*
    üé¨ *Title* - ${title}
    ‚è≥ *Duration* - ${timestamp}
    üëÅÔ∏è *Views* - ${views}
    üë§ *Author* - ${author.name}
    üîó *Link* - ${videoUrl}
    > ùñ¶Œõùñ±ùñ•ùñ®Œûùñ´ùñ£ ùñ°ùñÆ–¢`;

    // ‡∂≠‡∂∏‡∑ä‡∂∂‡∑ä‡∂±‡∑ö‡∂Ω‡∑ä ‡∑É‡∑Ñ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    await conn.sendMessage(from, { 
      image: { url: image },
      caption: ytmsg
    });

    // ‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂ú‡∑ú‡∂±‡∑î ‡∂±‡∑è‡∂∏‡∂∫‡∂ö‡∑ä ‡∂¢‡∂±‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const randomName = `${Math.floor(Math.random() * 10000)}.mp4`;

    // ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const stream = ytdl(videoUrl, { filter: (info) => info.itag == 22 || info.itag == 18 })
      .pipe(fs.createWriteStream(`./data/${randomName}`));

    // ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    reply("*üîç Downloading the video... üé•*");

    await new Promise((resolve, reject) => {
      stream.on('error', reject);
      stream.on('finish', resolve);
    });

    // ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const stats = fs.statSync(`./data/${randomName}`);
    const fileSizeInBytes = stats.size;
    const fileSizeInMegabytes = fileSizeInBytes / (1024 * 1024);

    if (fileSizeInMegabytes <= 999) {
      // ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
      await conn.sendMessage(from, {
        video: fs.readFileSync(`./data/${randomName}`),
        fileName: `${title}.mp4`,
        mimetype: 'video/mp4'
      }, { quoted: mek });

      // ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫
      reply(`‚úÖ *${title}* has been downloaded successfully! üéâ`);
    } else {
      reply(`‚ùå ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫ 1000MB ‡∂â‡∂ö‡∑ä‡∂∏‡∑Ä‡∑è ‡∂á‡∂≠. ‡∂ë‡∂∫ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫. üò¢`);
    }

    // ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∏‡∂ö‡∑è ‡∂Ø‡∑ê‡∂∏‡∑ì‡∂∏
    fs.unlinkSync(`./data/${randomName}`);
  } catch (e) {
    console.error(e);
    reply("‚ùå An error occurred while processing your request. üò¢");
  }
});
