const { cmd } = require("../command");
const ytdl = require("@distube/ytdl-core"); // YouTube ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∑É‡∑Ñ audio ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è
const yts = require("yt-search"); // YouTube ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è
const fs = require("fs"); // ‡∂ú‡∑ú‡∂±‡∑î ‡∂ö‡∑Ö‡∂∏‡∂±‡∑è‡∂ö‡∂ª‡∂´‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è

// YouTube audio ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
cmd({
  pattern: "song",
  react: 'üé∂',
  desc: "Download YouTube audio by searching for keywords.",
  category: "main",
  use: ".audio <song name or keywords>",
  filename: __filename
}, async (conn, mek, msg, { from, args, reply }) => {
  try {
    const searchQuery = args.join(" ");
    if (!searchQuery) {
      return reply(`‚ùóÔ∏è ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ú‡∑ì‡∂≠‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑Ä‡∂†‡∂± ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±. üìù
      Example: .audio Despacito`);
    }

    // ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    reply("üîç Searching for the song... üéµ");

    // YouTube ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const searchResults = await yts(searchQuery);
    if (!searchResults.videos || searchResults.videos.length === 0) {
      return reply(`‚ùå No results found for "${searchQuery}". üòî`);
    }

    const videoDetails = searchResults.videos[0];
    const { title, duration, timestamp, views, author, url: videoUrl, image } = videoDetails;

    // audio ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∂∏‡∂ü ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫
    let ytmsg = `*üé∂ Song Name* - ${title}
*üïú Duration* - ${duration}
*üìª Listerners* - ${views}
*üéôÔ∏è Artist* - ${author.name}
> ùñ¶Œõùñ±ùñ•ùñ®Œûùñ´ùñ£ ùñ°ùñÆ–¢v10.1
> File Name ${title}.mp3`;

    // ‡∂≠‡∂∏‡∑ä‡∂∂‡∑ä‡∂±‡∑ö‡∂Ω‡∑ä ‡∑É‡∑Ñ audio ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    await conn.sendMessage(from, { 
      image: { url: image },
      caption: ytmsg
    });

    // ‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂ú‡∑ú‡∂±‡∑î ‡∂±‡∑è‡∂∏‡∂∫‡∂ö‡∑ä ‡∂¢‡∂±‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const tempFileName = `./store/yt_audio_${Date.now()}.mp3`;

    // audio ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const info = await ytdl.getInfo(videoUrl);
    const format = ytdl.filterFormats(info.formats, 'audioonly');
    const audioFormat = format.find(f => f.audioBitrate === 128);

    if (!audioFormat) {
      return reply("‚ùå No suitable audio format found. üò¢");
    }

    const audioStream = ytdl.downloadFromInfo(info, { quality: audioFormat.itag })
      .pipe(fs.createWriteStream(tempFileName));

    await new Promise((resolve, reject) => {
      audioStream.on('finish', resolve);
      audioStream.on('error', reject);
    });

    // audio ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    await conn.sendMessage(from, {
      audio: fs.readFileSync(tempFileName),
      mimetype: "audio/mpeg",
      fileName: `${title}.mp3`
    }, { quoted: mek });

    // ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫

    // ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∏‡∂ö‡∑è ‡∂Ø‡∑ê‡∂∏‡∑ì‡∂∏
    fs.unlinkSync(tempFileName);
  } catch (e) {
    console.error(e);
    reply("‚ùå An error occurred while processing your request. üò¢");
  }
});

// YouTube ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
cmd({
  pattern: "video",
  react: 'üé•',
  desc: "Download YouTube video by searching for keywords.",
  category: "main",
  use: ".video <video name or keywords>",
  filename: __filename
}, async (conn, mek, msg, { from, args, reply }) => {
  try {
    const searchQuery = args.join(" ");
    if (!searchQuery) {
      return reply(`‚ùóÔ∏è ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∑Ä‡∂†‡∂± ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±. üìù
      Example: .video Despacito`);
    }

    // ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    reply("```üîç Searching for the video... üé•```");

    // YouTube ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const searchResults = await yts(searchQuery);
    if (!searchResults.videos || searchResults.videos.length === 0) {
      return reply(`‚ùå No results found for "${searchQuery}". üòî`);
    }

    const videoDetails = searchResults.videos[0];
    const { title, duration, timestamp, views, author, url: videoUrl, image } = videoDetails;

    // ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∂∏‡∂ü ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫
    let ytmsg = `üé¨ *Title* - ${title}
üïú *Duration* - ${duration}
üëÅÔ∏è *Views* - ${views}
üë§ *Author* - ${author.name}
üîó *Link* - ${videoUrl}
> ùñ¶Œõùñ±ùñ•ùñ®Œûùñ´ùñ£ ùñ°ùñÆ–¢v10.1
> File Name ${title}.mp4`;

    // ‡∂≠‡∂∏‡∑ä‡∂∂‡∑ä‡∂±‡∑ö‡∂Ω‡∑ä ‡∑É‡∑Ñ ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    

    // ‡∂Ö‡∑Ñ‡∂π‡∑î ‡∂ú‡∑ú‡∂±‡∑î ‡∂±‡∑è‡∂∏‡∂∫‡∂ö‡∑ä ‡∂¢‡∂±‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const tempFileName = `./store/yt_video_${Date.now()}.mp4`;

    // ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const info = await ytdl.getInfo(videoUrl);
    const format = ytdl.filterFormats(info.formats, 'videoandaudio');
    const videoFormat = format.find(f => f.qualityLabel === '360p');

    if (!videoFormat) {
      return reply("‚ùå No suitable video format found. üò¢");
    }

    const videoStream = ytdl.downloadFromInfo(info, { quality: videoFormat.itag })
      .pipe(fs.createWriteStream(tempFileName));

    await new Promise((resolve, reject) => {
      videoStream.on('finish', resolve);
      videoStream.on('error', reject);
    });

    // ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    await conn.sendMessage(from, {
      video: fs.readFileSync(tempFileName),
      mimetype: "video/mp4",
      caption: ytmsg , 
      thumbail: image
    }, { quoted: mek });

    // ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫

    // ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∏‡∂ö‡∑è ‡∂Ø‡∑ê‡∂∏‡∑ì‡∂∏
    fs.unlinkSync(tempFileName);
  } catch (e) {
    console.error(e);
    reply("‚ùå An error occurred while processing your request. üò¢");
  }
});
